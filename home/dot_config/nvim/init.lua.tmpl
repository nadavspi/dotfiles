-- core options
vim.opt.number = true
-- line numbers
vim.opt.number = false
vim.opt.visualbell = true
vim.opt.undofile = true
vim.opt.swapfile = false
vim.opt.autoread = true
vim.g.mapleader = " "
vim.keymap.set("n", "<Space>", "<Nop>")
vim.opt.expandtab = true
vim.opt.smarttab = true
vim.opt.shiftwidth = 2
vim.opt.tabstop = 2
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.incsearch = true
vim.opt.hlsearch = false
vim.o.sessionoptions = "blank,buffers,curdir,folds,help,tabpages,winsize,winpos,terminal,localoptions"
vim.o.splitbelow = true
vim.o.splitright = true

local lazy = {}
function lazy.install(path)
	if not vim.loop.fs_stat(path) then
		print("Installing lazy.nvim....")
		vim.fn.system({
			"git",
			"clone",
			"--filter=blob:none",
			"https://github.com/folke/lazy.nvim.git",
			"--branch=stable", -- latest stable release
			path,
		})
	end
end

{{ if eq .chezmoi.os "darwin" }}
lazy.path = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
lazy.opts = {}
{{ else }}
local data_path = "/usr/share/nvim"
lazy.path = data_path .. "/lazy/lazy.nvim"
lazy.opts = {
	root = data_path .. "/lazy",
}
{{ end }}
function lazy.setup(plugins)
	lazy.install(lazy.path)

	vim.opt.rtp:prepend(lazy.path)
	require("lazy").setup(plugins, lazy.opts)
end
lazy.setup("plugins")

-- aesthetics
vim.opt.termguicolors = true
vim.cmd.colorscheme("catppuccin-mocha")

-- clipboard
vim.keymap.set("v", "<leader>y", '"+y')
vim.keymap.set("n", "<leader>y", '"+y')
vim.keymap.set("n", "<leader>p", '"+p')
vim.keymap.set("n", "<leader>P", '"+P')
vim.keymap.set("v", "<leader>p", '"+p')
vim.keymap.set("v", "<leader>P", '"+P"')
vim.keymap.set("n", "<leader>cf", '<cmd>let @" = expand("%:p")<cr>', { desc = "Copy full path" })

-- insert mode maps
vim.keymap.set("i", "<C-e>", "<Esc>A")

-- meta maps
vim.keymap.set("n", "gev", "<cmd>edit $MYVIMRC<cr>")
vim.keymap.set("n", "<leader>s", "<cmd>write<cr>")
vim.keymap.set("n", "<leader><leader>", "<c-^>")

-- jumping around
vim.keymap.set("", "J", "6j")
vim.keymap.set("", "K", "6k")
vim.keymap.set("o", "ar", "a]") -- [r]ectangular bracket
vim.keymap.set("o", "ac", "a}") -- [c]urly brace
vim.keymap.set("o", "am", "aW") -- [m]assive word
vim.keymap.set("o", "aq", 'a"') -- [q]uote
vim.keymap.set("o", "az", "a'") -- [z]ingle quote
vim.keymap.set("o", "ir", "i]") -- [r]ectangular bracket
vim.keymap.set("o", "ic", "i}") -- [c]urly brace
vim.keymap.set("o", "im", "iW") -- [m]assive word
vim.keymap.set("o", "iq", 'i"') -- [q]uote
vim.keymap.set("o", "iz", "i'") -- [z]ingle quote

-- window management
vim.keymap.set("n", "<leader>wc", ":close<cr>", { silent = true })
vim.keymap.set("n", "<leader>wo", ":only<cr>", { silent = true })
vim.keymap.set("n", "<leader>ws", ":split<cr>", { silent = true })
vim.keymap.set("n", "<leader>wv", ":vsplit<cr>", { silent = true })
vim.keymap.set("n", "<leader>wt", ":tabnew<cr>", { silent = true })
vim.keymap.set("n", "<leader>1", "1gt<cr>")
vim.keymap.set("n", "<leader>2", "2gt<cr>")
vim.keymap.set("n", "<leader>3", "3gt<cr>")
vim.keymap.set("n", "<leader>4", "4gt<cr>")
vim.keymap.set("n", "<leader>5", "5gt<cr>")
vim.keymap.set("n", "<leader>6", "6gt<cr>")
vim.keymap.set("n", "<leader>7", "7gt<cr>")
vim.keymap.set("n", "<leader>8", "8gt<cr>")

-- terminal
vim.keymap.set("t", "<Esc>", "<C-\\><C-n>")
vim.keymap.set("t", "<C-v><Esc>", "<Esc>")

vim.g.vimwiki_list = {
	{
		path = "~/Documents/Notes/",
		syntax = "markdown",
		ext = ".md",
		diary_rel_path = "DailyNotes/",
	},
}
vim.g.vimwiki_key_mappings = {
	links = 0,
}
vim.g.taskwiki_suppress_mappings = true

-- Reserve a space in the gutter
-- This will avoid an annoying layout shift in the screen
vim.opt.signcolumn = "yes"

-- Add cmp_nvim_lsp capabilities settings to lspconfig
-- This should be executed before you configure any language server
local lspconfig_defaults = require("lspconfig").util.default_config
lspconfig_defaults.capabilities =
	vim.tbl_deep_extend("force", lspconfig_defaults.capabilities, require("cmp_nvim_lsp").default_capabilities())

vim.keymap.set("n", "<leader>e", vim.diagnostic.open_float)
vim.keymap.set("n", "[d", vim.diagnostic.goto_prev)
vim.keymap.set("n", "]d", vim.diagnostic.goto_next)
vim.keymap.set("n", "<leader>q", vim.diagnostic.setloclist)

-- This is where you enable features that only work
-- if there is a language server active in the file
vim.api.nvim_create_autocmd("LspAttach", {
	desc = "LSP actions",
	callback = function(event)
		local opts = { buffer = event.buf }

		vim.keymap.set("n", "gk", "<cmd>lua vim.lsp.buf.hover()<cr>", opts)
		vim.keymap.set("n", "gd", "<cmd>lua vim.lsp.buf.definition()<cr>", opts)
		vim.keymap.set("n", "gD", "<cmd>lua vim.lsp.buf.declaration()<cr>", opts)
		vim.keymap.set("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<cr>", opts)
		vim.keymap.set("n", "go", "<cmd>lua vim.lsp.buf.type_definition()<cr>", opts)
		vim.keymap.set("n", "gr", "<cmd>lua vim.lsp.buf.references()<cr>", opts)
		vim.keymap.set("n", "gs", "<cmd>lua vim.lsp.buf.signature_help()<cr>", opts)
		vim.keymap.set("n", "<leader>rn", "<cmd>lua vim.lsp.buf.rename()<cr>", opts)
		vim.keymap.set({ "n", "v" }, "<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<cr>", opts)
	end,
})

pcall(require, "local")
