#+TITLE: Nadav Spiegelman's Emacs config
* Introduction
This is my Emacs configuration set up as an Org file. As a convert from Vim, I make heavy use of Evil.

Inspired by [[https://github.com/mwfogleman/config/blob/master/home/.emacs.d/michael.org][mwfogleman]], [[https://github.com/daschwa/dotfiles/blob/master/emacs.d/emacs-init.org][daschwa]], [[https://github.com/TheBB/dotfiles/blob/master/emacs/init.el][TheBB]], and others.
* General setup
** Package management
Set up package and req-package so the rest of this can work. Install req-package if it isn't already.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (package-initialize)

  (if (not (package-installed-p 'req-package))
      (progn
        (package-refresh-contents)
        (package-install 'req-package)))

  (require 'req-package)
#+END_SRC
** Basic settings
*** Remove scrollbars, menu bars, toolbars
#+BEGIN_SRC emacs-lisp
    (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

*** Quiet startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil)
#+END_SRC

*** Turn off alarms
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

*** Use UTF-8
#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC
*** Put backups and autosave files in tmp dir
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
*** Quicker prompts
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Remove nonexistent file confirmation
#+BEGIN_SRC emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil)
#+END_SRC
** Editing settings
*** Turn off blinking cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
*** Highlight current line
Like cursorline in Vim

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
*** Indicate empty lines
#+BEGIN_SRC emacs-lisp
(setq default-indicate-empty-lines t)
#+END_SRC
*** Delete trailing whitespace on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Indentation settings
Indent using spaces instead of tabs and use 4 spaces by default.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
#+END_SRC
*** Uniquify buffers with the same filename

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq
  uniquify-buffer-name-style 'post-forward
  uniquify-separator ":")
#+END_SRC
*** Column markers

#+BEGIN_SRC emacs-lisp
(req-package column-marker
  :config
  (progn
    (column-marker-1 80)
    (column-marker-2 120)))
#+END_SRC
*** Hippie expand
#+BEGIN_SRC emacs-lisp
(bind-key "M-/" 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
#+END_SRC
** Mac
*** Use command key as meta

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta))
#+END_SRC
*** Font settings
I use Input Sans and switch to Input Mono in buffers that need it.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil :height 170)
  (set-default-font "input sans")
  (setq-default line-spacing 0.25)
  (setq-default word-wrap t)

  (defun use-proportional-font ()
    (interactive)
    (face-remap-add-relative 'default '(:family "Input Sans")))

  (defun use-monospace-font ()
    (interactive)
    (face-remap-add-relative 'default '(:family "Input Mono")))

  (add-hook 'dired-mode-hook 'use-monospace-font)
  (add-hook 'help-mode-hook 'use-monospace-font)
  (add-hook 'magit-mode-hook 'use-monospace-font))
#+END_SRC
*** Use $PATH

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (req-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize)))
#+END_SRC
** Key bindings
General key bindings not necessarily tied to any packages.

*** Indent on RET like a sane person

#+BEGIN_SRC emacs-lisp
(bind-key "RET" 'newline-and-indent)
#+END_SRC

*** Use M-h for help
Because we're going to override the default bind to switch windows

#+BEGIN_SRC emacs-lisp
(bind-key "M-h" 'help)
#+END_SRC

*** Window splits

#+BEGIN_SRC emacs-lisp
(defun split-and-switch-horizontally ()
  (interactive)
  (split-window-horizontally)
  (other-window 1))

(defun split-and-switch-vertically ()
  (interactive)
  (split-window-vertically)
  (other-window 1))

(bind-key  "M-3" 'split-and-switch-horizontally)
(bind-key  "M-2" 'split-and-switch-vertically)
(bind-key  "M-1" 'delete-other-windows)
(bind-key  "M-0" 'delete-window)
(bind-key  "M-o" 'other-window)
#+END_SRC

*** Escape from everything
Use esc to get away from everything, like in vim
https://github.com/TheBB/dotfiles/blob/master/emacs/init.el

#+BEGIN_SRC emacs-lisp
(defun bb/minibuffer-keyboard-quit ()
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
(define-key minibuffer-local-map [escape] 'bb/minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'bb/minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'bb/minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'bb/minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'bb/minibuffer-keyboard-quit)
#+END_SRC
* Install Packages
The good stuff
** Evil and family
*** Enable C-u scrolling
Must be set before evil is loaded and use-package's :pre-load isn't working for some reason.

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-u-scroll t
      evil-want-C-w-in-emacs-state t)
#+END_SRC

*** Surround
#+BEGIN_SRC emacs-lisp
(req-package evil-surround
  :init (global-evil-surround-mode t))
#+END_SRC

*** Evil mode
#+BEGIN_SRC emacs-lisp
  (req-package evil
    :require evil-surround
    :config
    (evil-mode t)

    ;; map multiple states at once (courtesy of Michael Markert;
    ;; http://permalink.gmane.org/gmane.emacs.vim-emulation/1674)
    (defun set-in-all-evil-states (key def &optional maps)
      (unless maps
        (setq maps (list evil-normal-state-map
                         evil-visual-state-map
                         evil-insert-state-map
                         evil-emacs-state-map
                         evil-motion-state-map)))
      (while maps
        (define-key (pop maps) key def)))

    (defun set-in-all-evil-states-but-insert (key def)
      (set-in-all-evil-states key def (list evil-normal-state-map
                                            evil-visual-state-map
                                            evil-emacs-state-map
                                            evil-motion-state-map)))
    ;; colemak stuff
    (set-in-all-evil-states-but-insert "e" 'evil-previous-line)
    (set-in-all-evil-states-but-insert "n" 'evil-next-line)

    (define-key evil-motion-state-map "k" 'evil-search-next)
    (define-key evil-motion-state-map "K" 'evil-search-previous)

    (define-key evil-motion-state-map "j" 'evil-forward-word-end)
    ;; (define-key evil-motion-state-map "J" 'evil-forward-WORD-end)

    (define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)

    (setq evil-emacs-state-cursor  '("red" box))
    (setq evil-normal-state-cursor '("orange" box))
    (setq evil-visual-state-cursor '("green" box))
    (setq evil-insert-state-cursor '("orange" bar))
    (setq evil-replace-state-cursor '("orange" bar))
    (setq evil-operator-state-cursor '("orange" hollow))
    (setq evil-motion-state-cursor '("gray" box))

    (define-key evil-normal-state-map (kbd ";") 'evil-ex)
    (define-key evil-visual-state-map (kbd ";") 'evil-ex)
    (define-key evil-normal-state-map (kbd ":") 'evil-repeat-find-char)

    (define-key evil-normal-state-map (kbd "gei")
      (lambda () (interactive) (find-file user-init-file)))
    (define-key evil-normal-state-map (kbd "geb")
      'eval-buffer)
    (define-key evil-normal-state-map (kbd "geh")
      (lambda () (interactive) (find-file "/sudo::/etc/hosts")))

    ;; Easier window switching
    (defun evil-window-keymaps (map)
      (define-key map (kbd "C-k") 'evil-window-up)
      (define-key map (kbd "C-j") 'evil-window-down)
      (define-key map (kbd "C-h") 'evil-window-left)
      (define-key map (kbd "C-l") 'evil-window-right))
    (evil-window-keymaps evil-normal-state-map))
#+END_SRC

*** Leader

#+BEGIN_SRC emacs-lisp
  (req-package evil-leader
    :require evil
    :config
    (evil-leader/set-leader "SPC")
    (setq evil-leader/in-all-states)
    (global-evil-leader-mode t)

    (evil-leader/set-key "h" 'help)

    ;; define and name prefixes, courtesy of spacemacs
    (dolist (x '(("t" . "toggles")
                 ("w" . "windows")))
      (let ((key (car x))
            (prefix-command (intern (format "%s-prefix" (cdr x)))))
        (define-prefix-command prefix-command)
        (evil-leader/set-key key prefix-command)))

    ;; files
    ;;(evil-leader/set-key "fs" 'save-buffer)

    ;; window management
    (evil-leader/set-key
      "ww" 'split-and-switch-horizontally
      "wv" 'split-and-switch-vertically
      "wc" 'delete-window
      "wo" 'delete-other-windows)

    ;; switch to previous buffer with <leader>SPC
    (evil-leader/set-key
      "SPC" 'mode-line-other-buffer))
#+END_SRC

*** Evil-nerd-commenter
#+BEGIN_SRC emacs-lisp
  (req-package evil-nerd-commenter
    :pre-load (setq evilnc-hotkey-comment-operator "gc")
    :require evil-leader)
#+END_SRC

*** Matchit
#+BEGIN_SRC emacs-lisp
(req-package evil-matchit
  :require evil
  :config
  (defun evilmi-customize-keybinding ()
    (evil-define-key 'normal evil-matchit-mode-map
      (kbd "TAB") 'evilmi-jump-items))

  (global-evil-matchit-mode t))
#+END_SRC

*** Key chord
Define the jk chord to switch to normal mode and save the buffer

#+BEGIN_SRC emacs-lisp
(req-package key-chord
  :require evil
  :config
  (key-chord-mode t)
  (defun evil-normal-and-save-buffer()
    (interactive)
    (evil-normal-state)
    (save-buffer))

  (key-chord-define evil-insert-state-map "jk" 'evil-normal-and-save-buffer)
  (key-chord-define evil-visual-state-map "jk" 'evil-normal-and-save-buffer))
#+END_SRC

*** Sneak
#+BEGIN_SRC emacs-lisp
(req-package evil-sneak
  :require evil
  :load-path "vendor/")
#+END_SRC

*** Evil-escape
Binds a key chord (`fd`) to escape from all the things

#+BEGIN_SRC emacs-lisp
  (req-package evil-escape
    :require evil
    :init
    (evil-escape-mode t))
#+END_SRC

** Relative line numbers
Like in Vim. Set globally.
Show the actual line number for the current line.
#+BEGIN_SRC emacs-lisp
  (req-package linum-relative
    :require evil-leader
    :init
    (setq linum-format 'linum-relative)
    :config
    (global-linum-mode 1)
    (evil-leader/set-key "tr" 'linum-relative-toggle))
#+END_SRC
** Ido
I mostly use Helm but there are places where ido still comes in handy

#+BEGIN_SRC emacs-lisp
(req-package ido-ubiquitous
  :config (ido-ubiquitous-mode 1))

(req-package flx-ido)

(req-package ido-vertical-mode)

(ido-mode t)
(ido-everywhere t)
(ido-vertical-mode 1)
(flx-ido-mode t)
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(req-package magit
  :require evil-leader

  :config
  (progn
    (evil-add-hjkl-bindings magit-branch-manager-mode-map 'emacs
      "K" 'magit-discard-item
      "L" 'magit-key-mode-popup-logging)
    (evil-add-hjkl-bindings magit-status-mode-map 'emacs
      "K" 'magit-discard-item
      "l" 'magit-key-mode-popup-logging
      "h" 'magit-toggle-diff-refine-hunk)
    (evil-add-hjkl-bindings magit-log-mode-map 'emacs)
    (evil-add-hjkl-bindings magit-commit-mode-map 'emacs)

    ;; full screen magit-status
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

    (defadvice magit-mode-quit-window (after magit-restore-screen activate)
      "Restores the previous window configuration and kills the magit buffer"
      (jump-to-register :magit-fullscreen))

    (define-key magit-status-mode-map (kbd "q") 'magit-mode-quit-window)

    (evil-set-initial-state 'git-commit-mode 'insert)

  (defun evil-git-add-current-file ()
    (interactive)
    (start-process "git-add"
                   (get-buffer-create "*git-add*")
                   "git" "add" buffer-file-name)
    (find-file-noselect buffer-file-name)
    (message "File added"))

  (defun evil-git-checkout-current-file ()
    (interactive)
    (start-process "git-checkout"
                   (get-buffer-create "*git-checkout*")
                   "git" "checkout --" buffer-file-name)
    (find-file-noselect buffer-file-name))

  (defun evil-get-remove-current-file ()
    (interactive)
    (start-process "git-remove"
                   (get-buffer-create "*git-remove*")
                   "git" "rm" "-f"
                   buffer-file-name)
    (kill-buffer))

  (evil-leader/set-key "ga" 'evil-git-add-current-file)

  (evil-ex-define-cmd "Gread" 'evil-git-checkout-current-file)
  (evil-ex-define-cmd "Gremove" 'evil-git-remove-current-file)

  (evil-leader/set-key
    "gs" 'magit-status
    "gp" 'magit-push
    "gc" (lambda ()
        (interactive)
        (minibuffer-with-setup-hook
            (lambda () (backward-char 1))
          (evil-ex "!git commit -m \"\""))))))
#+END_SRC
*** Magit git flow
#+BEGIN_SRC emacs-lisp
  (req-package magit-gitflow
    :require magit
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (req-package helm
    :require evil-leader
    :config
    (progn
      ;; don't show . and .. when using find-file
      (setq helm-boring-file-regexp-list '("\\.\\.$" "\\.$"))
      (setq helm-ff-skip-boring-files t)

      (evil-leader/set-key "b" 'helm-mini)
      (evil-leader/set-key "f" 'helm-find-files)
      (evil-leader/set-key "r" 'helm-recentf)

      (global-set-key (kbd "C-x C-m") 'helm-M-x)
      (evil-leader/set-key "x" 'helm-M-x)


      (define-key evil-normal-state-map (kbd "ghb") 'helm-bookmarks)
      (define-key evil-normal-state-map (kbd "g h i") 'helm-semantic-or-imenu)
      (define-key evil-normal-state-map (kbd "g h o") 'helm-occur)

      ;; hjkl navigation courtesy of spacemacs
      (define-key helm-map (kbd "C-j") 'helm-next-line)
      (define-key helm-map (kbd "C-k") 'helm-previous-line)
      (define-key helm-map (kbd "C-h") 'helm-next-source)
      (define-key helm-map (kbd "C-l") 'helm-previous-source)

      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
      (define-key helm-map (kbd "C-z") 'helm-select-action)))

  (req-package helm-ag
    :require helm)

  (req-package helm-projectile
    :require (helm projectile)
    :config
    (progn
      ;;(define-key evil-normal-state-map (kbd "C-p") 'helm-projectile)
      (evil-leader/set-key "p" 'helm-projectile)

      (setq projectile-completion-system 'helm)
      (helm-projectile-on)
      (setq helm-projectile-sources-list '(
                                           helm-source-projectile-files-list
                                           helm-source-projectile-projects
                                           ))
      (setq projectile-switch-project-action 'helm-projectile)
      ))
#+END_SRC
** Projectile
To turn on caching for a project, create a =.dir-locals.el= file with:
#+BEGIN_SRC text
((nil . ((projectile-enable-caching . t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (req-package projectile
    :config
    (progn
      (projectile-global-mode)
      (evil-leader/set-key "a g" 'projectile-ag)
      ))
#+END_SRC
** Working with text
*** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(req-package rainbow-delimiters
  :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
*** Smartparens

#+BEGIN_SRC emacs-lisp
  (req-package smartparens
    :config
    (progn
      (require 'smartparens-config)
      (setq sp-autoescape-string-quote nil)
      (defun prelude-smart-open-line-above ()
        "Insert an empty line above the current line.
  Position the cursor at it's beginning, according to the current mode."
        (interactive)
        (move-beginning-of-line nil)
        (newline-and-indent)
        (forward-line -1)
        (indent-according-to-mode))
      (sp-pair "{" nil :post-handlers
               '(((lambda (&rest _ignored)
                    (prelude-smart-open-line-above)) "RET")))
      (show-smartparens-global-mode t)
      (smartparens-global-mode t)))
#+END_SRC
*** Aggressive indent mode

#+BEGIN_SRC emacs-lisp
(req-package aggressive-indent
  :config
  (progn
    (eval-after-load 'scss-mode
      '(add-hook
        'scss-mode-hook
        (lambda () (unless defun-prompt-regexp
                     (setq-local defun-prompt-regexp "^[^[:blank:]].*")))))
    (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
    (add-hook 'css-mode-hook #'aggressive-indent-mode)))
#+END_SRC

*** Move-text
#+BEGIN_SRC emacs-lisp
(req-package move-text)
#+END_SRC

** Code completion
*** Company
#+BEGIN_SRC emacs-lisp
(req-package company
  :commands company-mode
  :init
  (progn
    (add-hook 'css-mode-hook 'company-mode)
    (add-hook 'nxml-mode-hook 'company-mode)
    (add-hook 'prog-mode-hook 'company-mode))
  :config
  (progn
    (setq company-idle-delay 0)
    (define-key evil-insert-state-map (kbd "TAB") 'company-manual-begin)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)))
#+END_SRC

*** Emmet
#+BEGIN_SRC emacs-lisp
(req-package emmet-mode
  :commands emmet-mode
  :init
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'nxml-mode-hook  'emmet-mode)
  (add-hook 'web-mode-hook  'emmet-mode)
  :config
  (setq emmet-preview-default nil)

  (define-key evil-insert-state-map (kbd "C-k") 'emmet-expand-line))
#+END_SRC

** Development modes
*** CSS mode
#+BEGIN_SRC emacs-lisp
(req-package css-mode
  :config
  (setq css-indent-offset 2))
#+END_SRC

*** SCSS mode
#+BEGIN_SRC emacs-lisp
(req-package scss-mode
  :require css-mode
  :config
  (progn
    (setq scss-compile-at-save nil)
    ;;(add-hook 'scss-mode-hook 'flycheck-mode)
    (add-hook 'scss-mode-hook (lambda () (setq comment-start "// " comment-end "")))))
#+END_SRC
*** Rainbow mode
Colorizes colors in CSS
#+BEGIN_SRC emacs-lisp
(req-package rainbow-mode
  :require css-mode
  :config
  (add-hook 'css-mode-hook 'rainbow-mode))
#+END_SRC
*** js2 mode
#+BEGIN_SRC emacs-lisp
(req-package js2-mode
  :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+END_SRC
*** Web mode
#+BEGIN_SRC emacs-lisp
(req-package web-mode
  :config
  (progn
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

    (setq web-mode-code-indent-offset 4)
    (setq web-mode-markup-indent-offset 4)

    ;; make web-mode play nice with smartparens
    (setq web-mode-enable-auto-pairing nil)))
#+END_SRC
*** nxml mode
#+BEGIN_SRC emacs-lisp
(req-package nxml-mode
:config
(setq
 nxml-child-indent 4
 nxml-attribute-indent 4
 nxml-slash-auto-complete-flag t))
#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
  (req-package org
    :config
    (progn
      (add-hook 'org-mode-hook
                (lambda () (interactive)
                  (org-indent-mode)
                  (visual-line-mode)
                  (setq org-clock-persist 'history)
                  (linum-mode)))

      ;; Persistent clocking
      (setq org-clock-persist 'history)
      (org-clock-persistence-insinuate)

      ;; Keys
      (evil-define-key 'normal org-mode-map
        ;; Todo
        "t" 'org-todo

        ;; Clocking
        "gxi" 'org-clock-in
        "gxo" 'org-clock-out
        "gxd" 'org-clock-display
        "gxr" 'org-clock-report)

      ;; Todo settings
      (setq org-todo-keywords
            (quote ((sequence "TODO(t)" "TODAY(o)" "WAITING(w)" "|" "CANCELLED(c)" "DONE(d)"))))
      (setq org-log-done t)

      ;; Capture
      (setq org-directory "~/Dropbox/Org")
      (setq org-default-notes-file "~/Dropbox/Org/inbox.org")
      (setq org-refile-targets '(("life.org" :maxlevel  . 2)
                                 ("work.org" :maxlevel . 1)))

      ;; Agenda
      (setq org-agenda-files
            (list "~/Dropbox/Org/life.org" "~/Dropbox/Org/work.org"))


      ;; Enable syntax highlighting in babel src blocks
      (setq-default org-src-fontify-natively t)

      ;; (define-key evil-normal-state-map (kbd "gh") 'outline-up-heading)
      (define-key evil-normal-state-map (kbd "T") 'org-time-stamp)

      (mapcar (lambda (state)
                (evil-declare-key state org-mode-map
                  (kbd "M-l") 'org-metaright
                  (kbd "M-h") 'org-metaleft
                  (kbd "M-k") 'org-metaup
                  (kbd "M-j") 'org-metadown
                  (kbd "M-L") 'org-shiftmetaright
                  (kbd "M-H") 'org-shiftmetaleft
                  (kbd "M-K") 'org-shiftmetaup
                  (kbd "M-J") 'org-shiftmetadown))
              '(normal insert))))
#+END_SRC

** Aesthetics
*** Rich minority
Hide minor modes from the mode lines

#+BEGIN_SRC emacs-lisp
  (req-package rich-minority
    :init
    (progn
      (rich-minority-mode 1)
      (setf rm-blacklist "")))
#+END_SRC
*** Smart mode line

#+BEGIN_SRC emacs-lisp
  (req-package smart-mode-line
    :init
    (progn
      (setq sml/no-confirm-load-theme t)
      (sml/setup)
      )
    :config
    (progn
      (setq sml/shorten-directory t)
      (setq sml/shorten-modes t)
      (setq sml/name-width 40)
      (setq sml/mode-width 'full)
      ))
#+END_SRC
*** Golden ratio
#+BEGIN_SRC emacs-lisp
  (req-package golden-ratio
    :config
    (progn
     (setq golden-ratio-extra-commands
           (append golden-ratio-extra-commands
                   '(evil-window-left
                     evil-window-right
                     evil-window-up
                     evil-window-down
                     select-window-0
                     select-window-1
                     select-window-2
                     select-window-3
                     select-window-4)))

     (defun spacemacs/toggle-golden-ratio ()
       "Toggle golden-ratio mode on and off."
       (interactive)
       (if (symbol-value golden-ratio-mode)
           (progn (golden-ratio-mode -1)(balance-windows))
         (golden-ratio-mode)
         (golden-ratio)))
     (evil-leader/set-key "tg" 'spacemacs/toggle-golden-ratio)))
#+END_SRC
*** Window numbering
#+BEGIN_SRC emacs-lisp
  (req-package window-numbering
    :require evil-leader
    :config
    (progn
      (evil-leader/set-key
        "0" 'select-window-0
        "1" 'select-window-1
        "2" 'select-window-2
        "3" 'select-window-3
        "4" 'select-window-4
        "5" 'select-window-5
        "6" 'select-window-6
        "7" 'select-window-7
        "8" 'select-window-8
        "9" 'select-window-9)

      (window-numbering-mode t)))
#+END_SRC
** Finish req-package
#+BEGIN_SRC emacs-lisp
(req-package-finish)
#+END_SRC

* Helper functions
** Adjust font size
Courtesy of spacemacs

#+BEGIN_SRC emacs-lisp
  (defun spacemacs/scale-font-size-overlay-map ()
    "Set a temporary overlay map to easily change the font size."
    (set-temporary-overlay-map
     (let ((map (make-sparse-keymap)))
       (define-key map (kbd "+") 'spacemacs/scale-up-font)
       (define-key map (kbd "-") 'spacemacs/scale-down-font)
       (define-key map (kbd "=") 'spacemacs/reset-font-size)
       map) t))

  (defun spacemacs/font-scaling-micro-state-doc ()
    "Display a short documentation in the mini buffer."
    (message "Scale Font micro-state:
    + to scale up
    - to scale down
    = to reset
  Press any other key to exit."))

  (spacemacs/font-scaling-micro-state-doc)

  (defun spacemacs/scale-up-or-down-font-size (direction)
    "Scale the font. If DIRECTION is positive or zero the font is scaled up,
  otherwise it is scaled down."
    (interactive)
    (let ((scale 0.5))
      (if (eq direction 0)
          (text-scale-set 0)
        (if (< direction 0)
            (text-scale-decrease scale)
          (text-scale-increase scale))))
    (spacemacs/scale-font-size-overlay-map)
    (spacemacs/font-scaling-micro-state-doc))

  (defun spacemacs/scale-up-font ()
    "Scale up the font."
    (interactive)
    (spacemacs/scale-up-or-down-font-size 1))

  (defun spacemacs/scale-down-font ()
    "Scale up the font."
    (interactive)
    (spacemacs/scale-up-or-down-font-size -1))

  (defun spacemacs/reset-font-size ()
    "Reset the font size."
    (interactive)
    (spacemacs/scale-up-or-down-font-size 0))


  (evil-leader/set-key
    "="  'spacemacs/reset-font-size
    "+"  'spacemacs/scale-up-font
    "-"  'spacemacs/scale-down-font)
#+END_SRC
** Cleanup buffer
Useful stuff from Magnars

#+BEGIN_SRC emacs-lisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer.
Including indent-buffer, which should not be called automatically on save."
  (interactive)
  (untabify-buffer)
  (delete-trailing-whitespace)
  (indent-buffer))

(evil-leader/set-key "c" 'cleanup-buffer)
#+END_SRC
** Linewise
Some useful mappings inspired by unimpaired.vim
#+BEGIN_SRC emacs-lisp
(evil-define-command evil-linewise-blank-lines-above (&optional count argument)
  "Inserts blank lines above the cursor"
  (interactive "p")
  (evil-open-above count)
  (evil-normal-state)
  (evil-next-line)
  (message nil))

(evil-define-command evil-linewise-blank-lines-below (&optional count argument)
  "Inserts blank lines below the cursor"
  (interactive "p")
  (evil-open-below count)
  (evil-normal-state)
  (evil-previous-line count)
  (message nil))

(evil-define-command evil-linewise-move-text-down (&optional count argument)
  "Moves line arg lines down. Uses move-text.el"
  (interactive "p")
  (move-text-down count))

(evil-define-command evil-linewise-move-text-up (&optional count argument)
  "Moves line arg lines up. Uses move-text.el"
  (interactive "p")
  (move-text-up count))

(evil-define-command evil-linewise-paste-newline-below
  "Pastes in a new line below"
  (interactive)
  ;; (move-end-of-line 1)
  ;; (newline-and-indent)
  (evil-open-below 1)
  (evil-normal-state)
  (evil-paste-after 1)
  (message nil))

(evil-define-command evil-linewise-paste-newline-above
  "Pastes in a new line above"
  (interactive)
  (evil-open-above 1)
  (evil-normal-state)
  (evil-paste-after 1)
  (message nil))

(evil-define-command evil-linewise-next-buffer
  "Goes to the next buffer"
  (interactive)
  (evil-next-buffer 1))

(evil-define-command evil-linewise-previous-buffer
  "Goes to the previous buffer"
  (interactive)
  (evil-prev-buffer 1))

(define-key evil-normal-state-map (kbd "[ SPC") 'evil-linewise-blank-lines-above)
(define-key evil-normal-state-map (kbd "] SPC") 'evil-linewise-blank-lines-below)

(define-key evil-normal-state-map (kbd "[ e") 'evil-linewise-move-text-up)
(define-key evil-normal-state-map (kbd "] e") 'evil-linewise-move-text-down)

(define-key evil-normal-state-map (kbd "[ p") 'evil-linewise-paste-newline-above)
(define-key evil-normal-state-map (kbd "] p") 'evil-linewise-paste-newline-below)

(define-key evil-normal-state-map (kbd "[ b") 'evil-linewise-next-buffer)
(define-key evil-normal-state-map (kbd "] b") 'evil-linewise-previous-buffer)
#+END_SRC
** CSS helpers
*** Duplicate selector

#+BEGIN_SRC emacs-lisp
(defun duplicate-css-selector ()
  "Duplicates next selector and comma separates them"
  (interactive)
  (search-forward "{")
  (backward-delete-char 2)
  (insert ",")
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
  (backward-delete-char 1)
  (insert " {"))
(define-key evil-normal-state-map (kbd "g d s") 'duplicate-css-selector)
#+END_SRC

*** Duplicate property

Duplicates a property and flips its direction. E.g., padding-left -> padding-right
#+BEGIN_SRC emacs-lisp
(defun duplicate-opposite-css-property ()
  "Duplicates a CSS declaration and changes the property's direction from left to right, top to bottom, etc."
  (interactive)
  (evil-yank-line (point-at-bol) (point-at-eol) 'line)
  (evil-paste-after 1)
  (evil-forward-word-begin 2)
  (let ((x (current-word t t)))
    (kill-word 1)
    (cond ((equal "left" x) (insert "right"))
          ((equal "right" x) (insert "left"))
          ((equal "top" x) (insert "bottom"))
          ((equal "bottom" x) (insert "top")))))
(define-key evil-normal-state-map (kbd "g d p") 'duplicate-opposite-css-property)
#+END_SRC

** Magento
*** Toggle template hints
Uses magerun to toggle template hints

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "g m h")
  (lambda ()
    (interactive)
    (start-process "magerun"
                   (get-buffer-create "*magerun*")
                   "magerun" "dev:template-hints")
    (message "Toggling template hints")))
#+END_SRC
** Org clock statusbar app
https://github.com/koddo/org-clock-statusbar-app

#+BEGIN_SRC emacs-lisp
(add-hook 'org-clock-in-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" (concat "tell application \"org-clock-statusbar\" to clock in \"" org-clock-current-task "\""))))
(add-hook 'org-clock-out-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" "tell application \"org-clock-statusbar\" to clock out")))
#+END_SRC

** Elisp slime navigation

Turn on eldoc and slime nav for elisp and bind K to describe the thing at point.
From here: http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
#+BEGIN_SRC emacs-lisp
  (defun my-lisp-hook ()
    (eldoc-mode))

  (add-hook 'emacs-lisp-mode-hook 'my-lisp-hook)

  ;; (evil-define-key 'normal emacs-lisp-mode-map (kbd "K") 'elisp-slime-nav-describe-elisp-thing-at-point)
#+END_SRC
